// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String?
  provider  Provider?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  roles     Role[]
  Token     Token[]
  isBlocked Boolean   @default(false) @map("is_blocked")
  posts     Post[]    @relation("UserPosts")
  comments  Comment[] @relation("UserComments")
  likes     Like[]

  @@map("users")
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  author    User     @relation("UserComments", fields: [authorId], references: [id])
  authorId  String
  post      Post     @relation("PostComments", fields: [postId], references: [id])
  postId    String
  likes     Like[]   @relation("CommentLikes")

  @@map("comments")
}

model Post {
  id        String    @id @default(uuid())
  title     String
  content   String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  author    User      @relation("UserPosts", fields: [authorId], references: [id])
  authorId  String
  comments  Comment[] @relation("PostComments")
  likes     Like[]    @relation("PostLikes")

  @@map("posts")
}

model Token {
  token     String   @unique
  exp       DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  userAgent String   @map("user_agent")

  @@map("tokens")
}

model Like {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post?    @relation("PostLikes", fields: [postId], references: [id])
  postId    String?
  comment   Comment? @relation("CommentLikes", fields: [commentId], references: [id])
  commentId String?

  @@map("likes")
}

enum Role {
  ADMIN
  USER
}

enum Provider {
  GOOGLE
  YANDEX
}
